apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def releasePhase = "alpha"

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "<%= app_id %>"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "0.1.0-${releasePhase}+${versionCode}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // dependency version declarations for interpolation
    def supportLibVer = '25.0.1'
    def supportTestLibVer = '0.5'
    def retrofitLibVer = '2.1.0'
    def okhttpLibVer = '3.3.1'
    def butterknifeLibVer = '8.4.0'
    def gsonLibVer = '2.8.0'
    def leakcanaryLibVer = '1.5'
    def junitLibVer = '4.12'
    def assertJLibVer = '1.7.1'
    def mockitoLibVer = '1.10.19'
    def roboelectricLibVer = '3.1.4'
    def rxandroidLibVer = '2.0.1'
    def rxjavaLibVer = '2.0.1'

    // unit tests
    testCompile "junit:junit:${junitLibVer}"
    testCompile "org.assertj:assertj-core:${assertJLibVer}"
    testCompile "org.mockito:mockito-core:${mockitoLibVer}"
    testCompile "org.robolectric:robolectric:${roboelectricLibVer}"

    // instrumentation tests
    androidTestCompile "com.android.support.test:runner:${supportTestLibVer}"
    androidTestCompile "com.android.support.test:rules:${supportTestLibVer}"
    androidTestCompile "com.android.support:support-annotations:${supportLibVer}"

    // android support
    compile "com.android.support:appcompat-v7:${supportLibVer}"
    compile "com.android.support:design:${supportLibVer}"

    // gson
    compile "com.google.code.gson:gson:${gsonLibVer}"

    // retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitLibVer}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitLibVer}"

    // okhttp
    compile "com.squareup.okhttp3:okhttp:${okhttpLibVer}"
    compile "com.squareup.okhttp3:logging-interceptor:${okhttpLibVer}"

    // buterknife
    compile "com.jakewharton:butterknife:${butterknifeLibVer}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknifeLibVer}"

    // leak canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakcanaryLibVer}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanaryLibVer}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanaryLibVer}"

    // reactive extensions for android and java
    compile "io.reactivex.rxjava2:rxandroid:${rxandroidLibVer}"
    compile "io.reactivex.rxjava2:rxjava:${rxjavaLibVer}"
}
